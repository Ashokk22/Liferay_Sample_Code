/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.warrior.entitymanager.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ContainerModel;
import com.liferay.portal.model.TrashedModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import com.liferay.portlet.trash.model.TrashEntry;
import com.liferay.portlet.trash.service.TrashEntryLocalServiceUtil;

import com.warrior.entitymanager.model.EntityManager;
import com.warrior.entitymanager.model.EntityManagerModel;
import com.warrior.entitymanager.model.EntityManagerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityManager service. Represents a row in the &quot;warrior_EntityManager&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.warrior.entitymanager.model.EntityManagerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityManagerImpl}.
 * </p>
 *
 * @author HP
 * @see EntityManagerImpl
 * @see com.warrior.entitymanager.model.EntityManager
 * @see com.warrior.entitymanager.model.EntityManagerModel
 * @generated
 */
@JSON(strict = true)
public class EntityManagerModelImpl extends BaseModelImpl<EntityManager>
	implements EntityManagerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entity manager model instance should use the {@link com.warrior.entitymanager.model.EntityManager} interface instead.
	 */
	public static final String TABLE_NAME = "warrior_EntityManager";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "entityId", Types.BIGINT },
			{ "entityAddDate", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "entitystatus", Types.INTEGER },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "vocubalaryId", Types.BIGINT },
			{ "categoryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table warrior_EntityManager (uuid_ VARCHAR(75) null,entityId LONG not null primary key,entityAddDate VARCHAR(75) null,title VARCHAR(75) null,description VARCHAR(75) null,entitystatus INTEGER,companyId LONG,groupId LONG,userId LONG,vocubalaryId LONG,categoryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table warrior_EntityManager";
	public static final String ORDER_BY_JPQL = " ORDER BY entityManager.entityId ASC, entityManager.entityAddDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY warrior_EntityManager.entityId ASC, warrior_EntityManager.entityAddDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.warrior.entitymanager.model.EntityManager"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.warrior.entitymanager.model.EntityManager"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.warrior.entitymanager.model.EntityManager"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long DESCRIPTION_COLUMN_BITMASK = 4L;
	public static long ENTITYADDDATE_COLUMN_BITMASK = 8L;
	public static long ENTITYID_COLUMN_BITMASK = 16L;
	public static long ENTITYSTATUS_COLUMN_BITMASK = 32L;
	public static long GROUPID_COLUMN_BITMASK = 64L;
	public static long TITLE_COLUMN_BITMASK = 128L;
	public static long UUID_COLUMN_BITMASK = 256L;
	public static long VOCUBALARYID_COLUMN_BITMASK = 512L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EntityManager toModel(EntityManagerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EntityManager model = new EntityManagerImpl();

		model.setUuid(soapModel.getUuid());
		model.setEntityId(soapModel.getEntityId());
		model.setEntityAddDate(soapModel.getEntityAddDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setEntitystatus(soapModel.getEntitystatus());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setVocubalaryId(soapModel.getVocubalaryId());
		model.setCategoryId(soapModel.getCategoryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EntityManager> toModels(EntityManagerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EntityManager> models = new ArrayList<EntityManager>(soapModels.length);

		for (EntityManagerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.warrior.entitymanager.model.EntityManager"));

	public EntityManagerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EntityManager.class;
	}

	@Override
	public String getModelClassName() {
		return EntityManager.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("entityId", getEntityId());
		attributes.put("entityAddDate", getEntityAddDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("entitystatus", getEntitystatus());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("vocubalaryId", getVocubalaryId());
		attributes.put("categoryId", getCategoryId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		String entityAddDate = (String)attributes.get("entityAddDate");

		if (entityAddDate != null) {
			setEntityAddDate(entityAddDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer entitystatus = (Integer)attributes.get("entitystatus");

		if (entitystatus != null) {
			setEntitystatus(entitystatus);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long vocubalaryId = (Long)attributes.get("vocubalaryId");

		if (vocubalaryId != null) {
			setVocubalaryId(vocubalaryId);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask = -1L;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	@JSON
	@Override
	public String getEntityAddDate() {
		if (_entityAddDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityAddDate;
		}
	}

	@Override
	public void setEntityAddDate(String entityAddDate) {
		_columnBitmask = -1L;

		if (_originalEntityAddDate == null) {
			_originalEntityAddDate = _entityAddDate;
		}

		_entityAddDate = entityAddDate;
	}

	public String getOriginalEntityAddDate() {
		return GetterUtil.getString(_originalEntityAddDate);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_columnBitmask |= DESCRIPTION_COLUMN_BITMASK;

		if (_originalDescription == null) {
			_originalDescription = _description;
		}

		_description = description;
	}

	public String getOriginalDescription() {
		return GetterUtil.getString(_originalDescription);
	}

	@JSON
	@Override
	public int getEntitystatus() {
		return _entitystatus;
	}

	@Override
	public void setEntitystatus(int entitystatus) {
		_columnBitmask |= ENTITYSTATUS_COLUMN_BITMASK;

		if (!_setOriginalEntitystatus) {
			_setOriginalEntitystatus = true;

			_originalEntitystatus = _entitystatus;
		}

		_entitystatus = entitystatus;
	}

	public int getOriginalEntitystatus() {
		return _originalEntitystatus;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getVocubalaryId() {
		return _vocubalaryId;
	}

	@Override
	public void setVocubalaryId(long vocubalaryId) {
		_columnBitmask |= VOCUBALARYID_COLUMN_BITMASK;

		if (!_setOriginalVocubalaryId) {
			_setOriginalVocubalaryId = true;

			_originalVocubalaryId = _vocubalaryId;
		}

		_vocubalaryId = vocubalaryId;
	}

	public long getOriginalVocubalaryId() {
		return _originalVocubalaryId;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@Override
	public int getStatus() {
		return 0;
	}

	@Override
	public TrashEntry getTrashEntry() throws PortalException, SystemException {
		if (!isInTrash()) {
			return null;
		}

		TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		TrashHandler trashHandler = getTrashHandler();

		if (!Validator.isNull(trashHandler.getContainerModelClassName())) {
			ContainerModel containerModel = trashHandler.getParentContainerModel(this);

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName());

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	@Override
	public TrashHandler getTrashHandler() {
		return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		TrashHandler trashHandler = getTrashHandler();

		if ((trashHandler == null) ||
				Validator.isNull(trashHandler.getContainerModelClassName())) {
			return false;
		}

		try {
			ContainerModel containerModel = trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EntityManager.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EntityManager toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EntityManager)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntityManagerImpl entityManagerImpl = new EntityManagerImpl();

		entityManagerImpl.setUuid(getUuid());
		entityManagerImpl.setEntityId(getEntityId());
		entityManagerImpl.setEntityAddDate(getEntityAddDate());
		entityManagerImpl.setTitle(getTitle());
		entityManagerImpl.setDescription(getDescription());
		entityManagerImpl.setEntitystatus(getEntitystatus());
		entityManagerImpl.setCompanyId(getCompanyId());
		entityManagerImpl.setGroupId(getGroupId());
		entityManagerImpl.setUserId(getUserId());
		entityManagerImpl.setVocubalaryId(getVocubalaryId());
		entityManagerImpl.setCategoryId(getCategoryId());

		entityManagerImpl.resetOriginalValues();

		return entityManagerImpl;
	}

	@Override
	public int compareTo(EntityManager entityManager) {
		int value = 0;

		if (getEntityId() < entityManager.getEntityId()) {
			value = -1;
		}
		else if (getEntityId() > entityManager.getEntityId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getEntityAddDate().compareTo(entityManager.getEntityAddDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EntityManager)) {
			return false;
		}

		EntityManager entityManager = (EntityManager)obj;

		long primaryKey = entityManager.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EntityManagerModelImpl entityManagerModelImpl = this;

		entityManagerModelImpl._originalUuid = entityManagerModelImpl._uuid;

		entityManagerModelImpl._originalEntityId = entityManagerModelImpl._entityId;

		entityManagerModelImpl._setOriginalEntityId = false;

		entityManagerModelImpl._originalEntityAddDate = entityManagerModelImpl._entityAddDate;

		entityManagerModelImpl._originalTitle = entityManagerModelImpl._title;

		entityManagerModelImpl._originalDescription = entityManagerModelImpl._description;

		entityManagerModelImpl._originalEntitystatus = entityManagerModelImpl._entitystatus;

		entityManagerModelImpl._setOriginalEntitystatus = false;

		entityManagerModelImpl._originalCompanyId = entityManagerModelImpl._companyId;

		entityManagerModelImpl._setOriginalCompanyId = false;

		entityManagerModelImpl._originalGroupId = entityManagerModelImpl._groupId;

		entityManagerModelImpl._setOriginalGroupId = false;

		entityManagerModelImpl._originalVocubalaryId = entityManagerModelImpl._vocubalaryId;

		entityManagerModelImpl._setOriginalVocubalaryId = false;

		entityManagerModelImpl._originalCategoryId = entityManagerModelImpl._categoryId;

		entityManagerModelImpl._setOriginalCategoryId = false;

		entityManagerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EntityManager> toCacheModel() {
		EntityManagerCacheModel entityManagerCacheModel = new EntityManagerCacheModel();

		entityManagerCacheModel.uuid = getUuid();

		String uuid = entityManagerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			entityManagerCacheModel.uuid = null;
		}

		entityManagerCacheModel.entityId = getEntityId();

		entityManagerCacheModel.entityAddDate = getEntityAddDate();

		String entityAddDate = entityManagerCacheModel.entityAddDate;

		if ((entityAddDate != null) && (entityAddDate.length() == 0)) {
			entityManagerCacheModel.entityAddDate = null;
		}

		entityManagerCacheModel.title = getTitle();

		String title = entityManagerCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			entityManagerCacheModel.title = null;
		}

		entityManagerCacheModel.description = getDescription();

		String description = entityManagerCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			entityManagerCacheModel.description = null;
		}

		entityManagerCacheModel.entitystatus = getEntitystatus();

		entityManagerCacheModel.companyId = getCompanyId();

		entityManagerCacheModel.groupId = getGroupId();

		entityManagerCacheModel.userId = getUserId();

		entityManagerCacheModel.vocubalaryId = getVocubalaryId();

		entityManagerCacheModel.categoryId = getCategoryId();

		return entityManagerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", entityAddDate=");
		sb.append(getEntityAddDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", entitystatus=");
		sb.append(getEntitystatus());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", vocubalaryId=");
		sb.append(getVocubalaryId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.warrior.entitymanager.model.EntityManager");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityAddDate</column-name><column-value><![CDATA[");
		sb.append(getEntityAddDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entitystatus</column-name><column-value><![CDATA[");
		sb.append(getEntitystatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vocubalaryId</column-name><column-value><![CDATA[");
		sb.append(getVocubalaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EntityManager.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EntityManager.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private String _entityAddDate;
	private String _originalEntityAddDate;
	private String _title;
	private String _originalTitle;
	private String _description;
	private String _originalDescription;
	private int _entitystatus;
	private int _originalEntitystatus;
	private boolean _setOriginalEntitystatus;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _vocubalaryId;
	private long _originalVocubalaryId;
	private boolean _setOriginalVocubalaryId;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private long _columnBitmask;
	private EntityManager _escapedModel;
}